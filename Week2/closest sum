void merge(int arr[], int l, int m, int r)
{
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
        
    int i = 0;

    int j = 0;

    int k = l;
 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[],int l,int r){
    if(l>=r){
        return;
    }
    int m =l+ (r-l)/2;
    mergeSort(arr,l,m);
    mergeSort(arr,m+1,r);
    merge(arr,l,m,r);
}
int threeSumClosest(int A[], int B) {
    int l, h;
    int n = sizeof(A)/sizeof(int);
    int closest = 1000000000;
    mergeSort(A, 0, n);
    for(int i=0; i<n-1; i++){
        l = i + 1;
        h = n - 1;
        int sum = A[i]+A[l]+A[h];
        while(l<h){
            if(abs(1LL*B-sum)<abs(1LL*B-closest)){
                closest=sum;
            }
            else if(sum<0){
                l++;
            }
            else
                h--;
            }
        }
        return closest;
}
