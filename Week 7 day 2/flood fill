bool visited[100][100];
int component_size = 0;
class Solution {
public:
        int dx[4] = { -1, 0, 1,  0 };
    int dy[4] = {  0, 1, 0, -1 };

    bool isValid(int a, int b, vector<vector<int>>& image, int newColor, int presentColor)
    {
        int row = image.size();
        int col = image[0].size();
        
	    if (a < 0 || a >= row || b < 0 || b >= col) //Checking Boundary Condition
		    return false;

        int oldColor = image[a][b];
        
        /*
            Here, checking two conditions
        
            1. if the color is already filled no need to fill again
            2. if existing color is not equal to (sr, sc) then don't touch
        
        */
	    if (image[a][b] == newColor || oldColor != presentColor) return false;

	    return true;
    }
    
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int u, int v, int newColor) {
        
            const int presentColor = image[u][v];
        
        	image[u][v] = newColor;

	        for (int i = 0; i < 4; ++i) // Getting co-ordinates
	        {
		        if (isValid(u + dx[i], v + dy[i], image, newColor, presentColor))
		            {
                    
                        // Recursive call for neighbouring co-ordinates
			            floodFill(image, u + dx[i], v + dy[i], newColor); 
		            }
	        }
        
        return image;
    }
};
