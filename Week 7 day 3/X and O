class Solution {
private:
    void dfs(vector<vector<char>> &board, int i, int j){
        if(i >= board.size() || j >= board.at(i).size() || i < 0 || j < 0) return;
        if(board.at(i).at(j) != 'O') return;
     
	    board.at(i).at(j) = 'V';    // visited
        
        dfs(board, i - 1, j);
        dfs(board, i + 1, j);
        dfs(board, i, j - 1);
        dfs(board, i, j + 1);
    }
    
public:
    void solve(vector<vector<char>>& board) {
        int m = board.size(), n = board.at(0).size();
        
        // check leftmost and rightmost columns
        for(int i = 0; i < m; i++){
            if(board.at(i).at(0) == 'O')     dfs(board, i, 0);            
            if(board.at(i).at(n - 1) == 'O') dfs(board, i, n - 1);
        }
        
        // check top and bottom rows
        for(int j = 0; j < n; j++){
            if(board.at(0).at(j) == 'O')     dfs(board, 0, j);            
            if(board.at(m - 1).at(j) == 'O') dfs(board, m - 1, j);
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board.at(i).at(j) == 'O') board.at(i).at(j) = 'X';
                if(board.at(i).at(j) == 'V') board.at(i).at(j) = 'O';
            }
        }
    }
};
