class Solution {
public:
    static bool chk(int x,int y,int row,int col){
        
        return (x>=0 and x<row and y>=0 and y<col);
    }
    void dfs(vector<vector<int>>& grid,int x,int y,int &cnt){
        
        int  row=grid.size(), col=grid[0].size();
        
        if(!chk(x,y,row,col) || grid[x][y]!=1)return; //if out of bounds or see if it is already visited or it is water
        
        grid[x][y]=-1;   // make cell=1 -> cell=-1 to make it visited so that not to count again and again
        
        cnt++;           // count this island
        
        // visit all neighbouring islands if exists
        dfs(grid,x+1,y,cnt);
        dfs(grid,x-1,y,cnt);
        dfs(grid,x,y+1,cnt);
        dfs(grid,x,y-1,cnt);
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        int ans=0;
        
        int m=grid.size(),n=grid[0].size(), i,j;
       
        
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==1){
                    
                    int cnt=0; 
                    dfs(grid,i,j,cnt);
                    
                    ans=max(ans,cnt); 
                }
            }
        }
        
        return ans;
    }
};
